				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Часть 3. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. 

22.Создание суперпользователя непосредственно в базе данных.
22.1 Создаем допполнительный проект AccountHelper который вычисляет соль и хэш по заданному паролю. Эти данные для суперпользователя.
		Копируем их и вставляем в таблицу пользователей в db. Теперь можно авторизоваться под этим пользователем и получить токен на него.

23. Добавляем пакет в основной проект Microsoft.AspNetCore.Authentication.JwtBearer. Пакет служит для получения 
	OpenID connect (протокол проверки подлинности на основе OAuth 2.0), предъявителем токена. Без этого пакета пришлолсь бы 
	вручную проверять передаваемые токены.
	23.1. После этого необходимо добавить инсталяцию аутентификационного сервиса в файл startup (.net5)
	
    services.AddAuthentication(x => // Add a service with properties
            {
                x.DefaultAuthenticateScheme =
                JwtBearerDefaults.AuthenticationScheme; // use the defalt scheme for autentication
                x.DefaultChallengeScheme =
                JwtBearerDefaults.AuthenticationScheme;
            })
                // Подключить предъявителя и настроить его параметры
                .AddJwtBearer(options =>
                {
                    options.RequireHttpsMetadata = false;// Запрашивать ли http метаданные
                    options.SaveToken = true; // должен ли токен предъявителя быть сохранен в сервисе авторизации в случае усп. авторизации
                    options.TokenValidationParameters = new TokenValidationParameters // параметры валидации
                    {
                        ValidateIssuerSigningKey = true, // вызывается ли проверка валидности защитного ключа предъявителя
                        IssuerSigningKey = // издатель ключа // содержит ключ который будет использован для проверки
                        new SymmetricSecurityKey(Encoding.ASCII.GetBytes(AuthenticateService.SecretKey)), // передаем наш ключ и кодируем в ASCII

                        ValidateIssuer = false, // Проверка предъявителя во время проверки токена
                        ValidateAudience = false,
                        ClockSkew = TimeSpan.Zero
                    };
                });
    Это проверка валидности токена и проверка соответсвия ключа
24. Расширить интерфейс Свагера, для проверки сервисов аутентификации

25. Пометить контроллеры специальными атрибутами для аутентификации: [Authorize]. В том числе этим атрибутом нужно пометить контроллер самой 
    авторизации. Для этих контроллеров должны при запросе проверяются токены. Те методы, которые должны быть доступны для неавторизованных
    пользователей должны быть помеченны атрибутом [AllowAnonymous] - разрешить анонимность. Это актуально для метода Login.