~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GRPC frameworc		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	GRPC frameworc - фреймворк работы с удаленными процедурами. Фреймворк работает с HTTP/2
gRPC (Remote Procedure Calls) — это система удалённого вызова процедур (RPC) с открытым исходным кодом, первоначально разработанная в Google в 2015 году. В качестве транспорта 
используется HTTP/2, в качестве языка описания интерфейса — Protocol Buffers.gRPC предоставляет такие функции как аутентификация, двунаправленная потоковая передача и управление 
потоком, блокирующие или неблокирующие привязки, а также отмена и тайм-ауты. Генерирует кроссплатформенные привязки клиента и сервера для многих языков. Чаще всего используется 
для подключения служб в микросервисном стиле архитектуры и подключения мобильных устройств и браузерных клиентов к серверным службам.

Этот фреймворк не использует сериализацию запросов и ответов сервера, что увеличивает эффективностьпередачи данных. gRPC использует Protocol Buffers для кодирования данных. 
В отличие от HTTP API с JSON, они имеют более строгую спецификацию.

Для описания файлов protocol buffer file используется язык IDL.
IDL, или язык описания интерфейсов (англ. Interface Description Language или Interface Definition Language) — язык спецификаций для описания интерфейсов, синтаксически похожий
на описание классов в языке C++.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Перевод сервиса на GRPC	   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Устанавливаем пакеты 
	Grpc.Tools
	Grpc.AspNetCore	

2. Создаем папку Protos в которой будем хранить протофайлы (protocol buffer file) Эти файлы используются для кодирования запросов.
	Добавляем протофайл Client.proto. Протофайл - альтернатива контроллера.

3. В протофайле с помощью кода на языке IDL описываем необходимый  сервис, запросы, и ответы на запросы. В свойствах прото-файла указываем в графе 
	bulid action - Protobuf compiler.
	GRPC Stab claces - Server only
	Делаем сборку. Компилятор создает файлы сборки протофайлов ClientGrpc в недрах папки obj. В этом классе есть абстрактный класс ClientServiceBase.
	Унаследовавшись от этого класса создаем класс ClientService в папке impl. Переопределяем метод Create:
		public class ClientService : ClientServiceBase
		{
			public override Task<CreateClientResponse> Create(CreateClientRequest request, ServerCallContext context)
			{
				return base.Create(request, context);
			}
		}
	При этом CreateClientRequest это класс сгенерированный в файле  Client в сборке. Получившийса ClientService - оналог контроллера. ServerCallContext - параметр
	запроса, аналог ControllerBase.

4. Регистрация сервиса В файле Startup.
            #region Configure gRPC
            services.AddGrpc();
            #endregion

	Затем в методе Configure:	            
			app.UseEndpoints(endpoints =>
            {
                #region Configure gRPC
                endpoints.MapGrpcService<ClientService>();
                #endregion
                endpoints.MapControllers();
            });

5. Тепрь сервис ClientService получает такие же права и правила как и другие контроллеры. Оформляем сервис аналогично контроллеру и компилируем приложение.
	При этом данные этого сервиса передаются по отдельному каналу. Теперь необходимо законфигурировать этот канал, как защищенное соединение https. 	

	Установить сервер iis: Панель управления -> программы и компоненты -> включение или отключение компоненты windows -> Службы iis (выделить галочки). 
	Появится программа "Диспетчер служб iis" запускаем. Это программа для хостинга сайтов. Эта программа генерирует тестовый сертификат. На главной странице 
	-> сертификаты сервера -> Iis developer sertificate. Экспортировать сертификат на C:.
6. Открываем файл programm. На пункте меню ConfigurWebHostDefault добавляем
                    webBuilder.ConfigureKestrel(options=>
                    {
                        // set a properties and methods
                        options.Listen(IPAddress.Any, 5001, ListenOptions =>
                        {
                            ListenOptions.Protocols = Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols.Http2;
                            ListenOptions.UseHttps(@"C:\devcert.pfx", "12345"); // указать номер защищенного ключа и пароль
                        });
                    })
					.UseStartup<Startup>();

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Тестирование сервиса	   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Создаем новый консольный проект CardStorageClient создаем в нем папку proto и добавляем существующий элемент как link(связь) Client.Proto. Теперь этот файл
	при изменении файл отразится во всех проектах. Так можно реализовавать свои библиотеки.
2. Добавляем пакеты
	Grpc.Tools
	Grpc.Net.Client
	Google.Protobuf

3. Для ссылочного файла client.proto выставляем:
	действие при сборке : Protobuf compiler
	gRPC Stub Classes : Client only

4. Собрать решение. На стороне клиента так же сгенерирован класс ClientGRPC. Сгенерирован базовый класс ClientServiceClient
5. Для теста в теле Main используем следующий код:

			using (GrpcChannel grpcChannel = GrpcChannel.ForAddress("https://localgost:5001"))
            {
                ClientServiceClient client = new ClientServiceClient(grpcChannel);
                var response =  client.Create(new ClientServiceProtos.CreateClientRequest
                {
                    FirstName = "Евгений",
                    Surname = "Евгениев",
                    Patronymic = "Евгениевич"
                });
                Console.WriteLine($"ClientId: {response.ClientId}; ErrorCode: {response.ErrorCode}; ErrorMessage: {response.ErrorMessage}");
            }   
			
6. Перед запуском Сервиса CardStorageService необходимо выставить метод запуска CardStorageService вместо iis Express.
7. Для одновременной отладки двух приложений: В свойствах решения в поле Startup progect выбираем переключатель Multiple startup projects. В рамках этого меню 
	выбираем настройки:
	CardStorageClient : Start
	CardStorageService : Start

8. В файле sturtup секции configure необходимо отключить встроенное логирование для устранения ошибки десериализации(баг)
	        // Отключить встроенное логирование при запросе "application/grpc", чтобы не вылетала ошибка сериализации.
            app.UseWhen(ctx => ctx.Request.ContentType != "application/grpc",
                builder =>
                {
                    builder.UseHttpLogging();
                });


