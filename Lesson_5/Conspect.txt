~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0. Для развертывания десктопных приложений (установки многим пользователям) используется технология clikcOnce. ClickOnce — технология Майкрософт для развёртывания 
	приложений, основанных на фреймворках Windows Forms или Windows Presentation Foundation. Она подобна технологии Java Web Start для Java Platform. 
	Данная технология доступна с версии .NET 2.0 и выше.

1. Шифрование с помощью открытых и закрытых ключей.
	Технология ассиметричного шифрования (есть технология симетричного шифрования где ключь у клиента и сервера один и тот же). 
	Расшифровать сообщение может тот кто имет закрытый ключ. Зашифровать может тот кто имеет открытый ключ.

2. Чтобы просмотреть  доступные пользователю сертификаты: Консоль управления mmc. Запустить: win+R +> mmc
	файл Сертификаты => добавить или удалить оснастку => Добавить сертификаты (с выбором переключателя для пользователя). Откроются доступные сертификаты 
	пользователя.
		Перейти в папку "Доверенные корневые центры сертификации"-> сертификаты. Откроются сертификаты в которых можно определить свойства установленных 
	сертификатов. В этих сертификатах содержатся открытые ключи. Эти сертификаты являются доверенными, пользователем винды. Сертификаты содержат полную 
	цепочку cоздания сертификатов(кто заказал, кто выдал). Компания выдавшая сертификаты полностью проверяет. Сертификат имеет так же свойство назначение, 
	указывающее для чего этот сертификат используется. В сертификате напрямую записывается для чего он создан.
	лицо которому выдает сертификат. Это сертификат создается на основе главного сертификата (компании его выдавшей).

3. При выпуске программного обеспечения тоже используется технология ассиметричного шифрования. Можно купить чейто сертификат, а можно создать свой центр 
	сертификации.
	как я понимаю: При этой технологии разработчик выпускающий ПО создает для него сертификат, с открытым ключом. У самого разработчика имеется закрытый ключ 
	с которым он может расшифровывать сообщения своих программ, имеющих открытые ключи (одно из применений). При этом программа выпущенная разработчиком 
	защищена от подделки (т.е. нельзя выдать свою программу за чужую). Т.е. это проверка подлинности приложений.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Создание своего центра сертификации.
Эта процедура создания програмы которая может создавать сертификаты с закрытыми и открытыми ключами. 
1. Создаем класс хранящий конфигурации сертификата CertificateGenerationProvider. В нем указываем объект корневого сертификата public X509Certificate2 
	RootCertificate { get; set; }, так же указывается время жизни сертификата, его имя, пароль, путь каталога куда выгружаются готовые сертификаты, 
	email - не понятно для чего.

2. Для того чтобы исключения генерировались в нашем типе создаем класс CertificateGenerationException : Exception. Который представляет собой обертку 
	над классом Exception.
3. Класс CertificateGenerationProvider будет выполнять функцию создания сертификатов. Содержит два метода:
		public void GenerateRootSertificate(CertificateConfiguration settings) - создает корневой сертификат
		public void GenerateCertificate(CertificateConfiguration settings) - сооздает не корневой сертификат
		Сертификаты выгружаются в папку отмеченную в settings.OutFolder.
	Для подготовки сертификатов устанавливаем пакет для сертификации Portable.BouncyCastle. 
	3.1 Ключи генерируются в следующем порядке:
		1. Сгенерировать пару ассиметричных ключей (закрытый и открытый)
		2. Подготовить наименование эмитета сертификата (issuer, издатель). При этом к имени сертификата добавляется приставка "CN="
		3. Подготовить имена файлов для хранения сертификата. Закрытый с расширением ".p12", открытый с расширением ".crt". 
		4. Создать серийный номер сертификата. При этом создается уникальный идентификатор GUID, переводится в массив байт. Затем
			первый элемент изменяется применением побитового & с числом 0x7F. Сделано это для большей уникальности (я так думаю)
		5. Настройки сертификата.
			Выполняются настройки такие как к примеру время жизни, алгоритм шифрования и т.д.
		6. Сгенерировать сертификат
		7. Получим подпись сертификата
	 Полученные сертификаты можно установить в хранилище вин. нужно в контекстном меню выбрать "установить". И просмотреть можно в win+R +> mmc
		в рамках соответствующей оснастки.

4. Создаем класс X509Certificate2Wrapper - Класс обертка (анг. Wrapper) над объектом X509Certificate  для оформленного отображения.

5. Создаем класс CertificateExplorerProvider который содержит методы доступа к сертификатам пользователя, помещает их в специальную обертку 
	X509Certificate2Wrapper.
6. Далее в основной программе создаем методы CR(UD) для работы пользователя с сертификатами.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Непосредственно подписание WPF приложения.(.net framework)
Для этого используется технология ClickOnce. 
1. Выбираем общую папку для установки.
2. Перед подписанием приложения необходимо создать .pfx файл сертификата. Для этого контекстное меню на сертификате .p12, все задачи -> экспорт
	Выгрузить его как .pfx файл.	
	Примечание: Перед этим нужно загрузить в хранилище сертификат и пометить его как экспортируемый.
3. Свойства проекта -> подписывание (signing). галочка на "подписать манифести ClickOnce". Нажать Select from file -> Выбираем .pfx файл
4. Сохраняем файл и студия добавит .pfx файл в папку с проектом.
5. Создание исполняемого файла .exe с помощью ClickOnce.
	5.1 Переходим во вкладку публикация в свойствах проекта
	5.2 По умолчанию публикация происходит в папку указанную в строке "Расположение папки публикации" 
		При публикации приложения на сетевой ресурс контекстное меню на проекте -> Опубликовать. Затем в диалоговом окне после выбора сетевой папки, 
		сразу нажать готово не нажимая кнопку далее.  - !!! ПОДОЗРЕВАЮ ЧТО ЭТОТ СПОСОБ БЫЛ АКТУАЛЕН НА РАННИХ ВЕРСИЯХ. Думаю, что для сетевого обновления 
		приложения нужно нажать кнопку "далее" и указать способ обновления "из UNC пути".
		UNC-пути (универсальное соглашение об именовании Unified Naming Convention) используются для доступа к сетевым ресурсам и имеют следующий формат:
		\\Server2\Share  file:///D:/ но так все равно нет автоматического обновления. По идее автообновление будет если папка будет сетевой.
	5.3 Файл .exe находится в указанной папке.























		 






