				~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Часть 1. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MS SQL Server
~~~~~~~~~~~~~
1. https://www.microsoft.com/ru-ru/sql-server/sql-server-downloads
    MS SQL Server - система управления реляционными базами данных (РСУБД), 

2. SQL Server Management Studio (SSMS)
   https://docs.microsoft.com/ru-ru/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15

   2.1. Создать базу данных в SQL menagement studio
   2.2. Создать пользователя для базы данных. Папка security -> login. Назначить ему базу данных (Сопоставление пользователей User Mapping)
        Назначить права db_owner. Это служебный пользователь базы данных.
   2.3  Выставить для субд серверную аутентификацию. (вкладка безопасность) Настроить вход служебного пользователя. Для подключения 
        базу данных нужно перезагрузить с помощью SQL Server 20** Configuration Manager

ASP.Net Core EF
~~~~~~~~~~~~~~~
    Приложение создается по шаблону проектирования ORM. ORM (англ. Object-Relational Mapping, рус. объектно-реляционное отображение, или преобразование) 
    — технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования, 
    создавая «виртуальную объектную базу данных».

0. Проект создается по шаблону asp.net core web API
    0.2 Для того чтобы получить стандартную нотацию и ирархию сущьностей, стоит создать проект в .net5, затем поменять настройку на .net6. 
      При этом приложение получит конфигурации .net5 и функциональность .net6. (target framework в настройках проекта)
    0.3 Создать проект .Data в котором будет содержаться модель для базы данных. Установить зависимость на проект .Data из основного проекта.

1. Установить пакет в главном проекте
     Microsoft.EntityFrameworkCore.Design

2. Установить пакет в .Data проекте
     Microsoft.EntityFrameworkCore
     Microsoft.EntityFrameworkCore.Proxies
     Microsoft.EntityFrameworkCore.SqlServer
     Microsoft.EntityFrameworkCore.Tools

3. Создать новый DbContext class (В Data проекте). Например:
    
    public class SampleServiceDbContext : DbContext
    {            
        #region Контексты связи с таблицами БД (добавляется в процессе создания таблиц)
            public virtual DbSet<Client> Clients { get; set; }
        #region

        public SampleServiceDbContext(DbContextOptions options) : base(options)
        {
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
            optionsBuilder.UseSqlServer();
            optionsBuilder.UseLazyLoadingProxies();
        }
    }

4. Добавить новые "entity classes"
    Эти классы представляют собой модели таблиц базы данных. Они имеют атрибут таблиц. Например [Table("Clients")]. Они необходимы для 
    создания миграций.
   4.1 Установить связи с контекстом базы данных DbContext. То есть создать специальные поля "public virtual DbSet<объект entity(строка таблицы)>"
       со свойствами get set.

5. Создать миграцию 
   5.1 В файле appaettings.json создать строку соединение с базой данных "ConnectionString". Она должна содержать координаты базы данных, каталог, 
       служебного пользователя, пароль, и специальные свойства.
   Пример:
        "Settings": {
            "DatabaseOptions": {
            "ConnectionString": "data source=DESKTOP-E4UTNHO\\SQLEXPRESS;initial catalog=CardStorageService;User Id=CardStorageServiceUser;Password=12345;MultipleActiveResultSets=True;App=EntityFramework"
            }
        }
    5.2 добавление контекста базы данных в ConfigureServices        
            Пример: 
            // добавление контекста базы данных, и его настройка по средством ConectionString
            services.AddDbContext<CardStorageServiceDbContext>(options =>
            {
                options.UseSqlServer(Configuration["Settings:DatabaseOptions:ConnectionString"]);
            });
        при этом Configuration == builder.Configuration (в .net5)
    5.3 Пересобрать приложение и назначить основной проект в качестве запускаемого

    5.4 Вызываем консоль диспечера пакетов и осуществляем миграцию базы данных. При этом, в консоли диспечера пакетов переключить
        проект по умолчанию на .Data. Это не запускаемый проект, а проект с которым работает консоль (!) 
        Add-Migration InitialCreate
        Remove-Migration - для отката миграции

6. Для обновления БД (после добавления новой миграции) мы можем воспользоваться командой   
    Update-Database
7. Добавляем контроллеры. В данном примере API Empty
8. Добавляем сервисы. Добавляем репозитории для сущьностей (как в модели базы данных) с CRUID операциями.
9. В рамках DI добавляем зависимости для сервисов. Время жизни выбираем scoped. (в методе configureServices)
    Пример:
    services.AddScoped<IClientRepositoryService, ClientRepository>();

10. Внедряем ссылку на контекст базы данных в репозитории, создавая соответствующие поле. Затем инициализируем её в конструкторе класса
    private readonly CardStorageServiceDbContext _dbContext; // Ссылка на контекст
11. Так же создаем логгер, для ведения журнала, и инициализируем её в конструкторе класса
    private readonly ILogger<CardRepository> _logger; // Ведение журнала
    Для логирования устанавливаем NLog.Web.AspNetCore
12. Законфигурировать взаимодействие с логгером в ConfigureService                
            services.AddHttpLogging(logging =>
            {
                logging.LoggingFields = HttpLoggingFields.All | HttpLoggingFields.RequestQuery;
                logging.RequestBodyLogLimit = 4096;
                logging.ResponseBodyLogLimit = 4096;
                logging.RequestHeaders.Add("Authorization");
                logging.RequestHeaders.Add("X-Real-IP");
                logging.RequestHeaders.Add("X-Forwarded-For");
            });
13. Создать текстовый конфигурационный файл nlog.config. В этом файле прописаны правила (тег <rules>) логирования. Он обеспечивает сохранение записей журнала в 
    разных файлах <targets> для каждого объекта логирования. В данном случае есть 3 файла: serviceAllFile, httpAllFile, serviceAllConsole.

    В файле appsettings.json прописываем папку для хранения журналов
    "Logger": {
      "Path": "C:/Logs/CardStorageService"
    }
    В свою очередь nlog.config содержит запись которая определяет из файла appsettings.json, в переменной logDirectory,
    путь сохранения файлов.    
            <variable name="logDirectory" value="${configsetting:item=Settings.Logger.Path}/" />
    Затем эта переменная используется для сохранения файла логирования при изменении
    		<target xsi:type="File" name="httpAllFile"
			fileName="${logDirectory}${date:format=yyyyMMdd}.${serviceName}.Requests.log"
			layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}" />
14. Реализуем в контроллерах CRUD методы. 
    14.1 Взаимодействие с базой данных происходит через DbContext. Исключения обрабатываются на уровне контроллера (try catch). А ошибки 
        генерируются в сервисах и передаются в контроллер. 
        например:          
            if(card == null)
                {
                    throw new Exception("Client not found");               
                }
    14.2 Запросы в контроллер передаются через класс  *Request а ответы *Response : IOperationResult. IOperationResult - создаем пустой интерфейс 
        (для DI) и на основе него  создаем классы *Response, описывающие приемлемый ответ сервиса на определенный запрос.
        В классах response создаются DTO объекты (Data transfer objects) созданные копированием свойств основных сущьностей возвращаемых объектов.
        Например Card и CardDto. В объектах dto нет свойств, которые били лишними для определенного запроса (например ключ карты).
    
    
15. Для сохранения опций базы данных в сервисах, определяем класс DatabaseOptions : IOptions. В данном случае в опциях мы будем хранить строку 
    ConnectionString соединения с базой данных. Переменную в которой будем хранить опции протягиваем в сервисы по технологии DI.
    Сам объект DatabaseOptions связывается с настройками в appsettings.json в файле startap:
    services.Configure<DatabaseOptions>(options =>
            {
                Configuration.GetSection("Settings:DatabaseOptions").Bind(options);
            });
16. Есть возможность обращаться к базе данных на прямую через провайдера а не через контекст, с помощью класса SqlConnection. Но при этом 
    программисту придется прописывать все непредвиденные ситуации, которые могут возникнуть, и которые были решены в entity framework.
 
